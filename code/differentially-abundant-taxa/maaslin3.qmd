---
title: "Differential abundance of bacterial taxa analysis"
subtitle: "Using Maaslin3"
author: "Sarah Tanja"
date: 2025-05-12
date-modified: "`r system('git log -1 --format=%ad --date=short', intern = TRUE)`"
format: gfm
toc: true
toc-title: Contents <i class="bi bi-bookmark-heart"></i>
toc-depth: 5
toc-location: left
bibliography: "../microbiome_bibtex.bib"
reference-location: margin
citation-location: margin
editor: 
  markdown: 
    wrap: 72
---

# Background

Microbiome Multivariable Associations with Linear Models (MaAsLin)

[MaAslin3](https://huttenhower.sph.harvard.edu/MaAsLin3) improves on
MaAslin2 by accounting for compositionality and accommodates
cross-sectional studies (that's ours!)

**For detailed interpretation of model design and results, see
[maaslin2_interpretation.qmd](maaslin2_interpretation.qmd)**

# Install

```{r}
#if(!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("Maaslin2")

library("devtools")
install_github("biobakery/maaslin3")
```

# Load Libraries

```{r}
library(maaslin3)
```

> MaAsLin2 requires two input files, one for taxonomic or functional
> feature abundances, and one for sample metadata.

> 1.  Data (or features) file
>
> -   This file is tab-delimited.
> -   Formatted with features as columns and samples as rows.
> -   The transpose of this format is also okay.
> -   Possible features in this file include microbes, genes, pathways,
>     etc.

> 2.  Metadata file
>
> -   This file is tab-delimited.
> -   Formatted with features as columns and samples as rows.
> -   The transpose of this format is also okay.

```{r}
library(qiime2R)
library(tidyverse)
```

# Setup

```{r}
# Define file paths
feature_table_path <- "../salipante/241121_StonyCoral/270x200/collapsed-l7.qza"
metadata_path <- "../metadata/meta.csv"
```

## Load metadata

```{r}
# Load metadata
meta <- read_csv(metadata_path)

# set factors
meta <- meta %>% 
  mutate(
    collection_date = as.Date(collection_date, format = "%d-%b-%Y"),
    stage    = factor(stage,    levels = c("cleavage", "prawnchip", "earlygastrula"), ordered = TRUE),
    leachate = factor(leachate, levels = c("control", "low", "mid", "high"),        ordered = TRUE),
    spawn_night = factor(
      collection_date,
      levels  = as.Date(c("06-Jul-2024", "07-Jul-2024", "08-Jul-2024"), format = "%d-%b-%Y"),
      labels  = c("July 6th", "July 7th", "July 8th"),
      ordered = TRUE
    )
  )

# make samples rownames
meta <- meta %>% 
  column_to_rownames(var = "sample_id") %>% 
  as.data.frame()


# View metadata structure
str(meta)
```

## Can I put reads per sample into the metadata?

# Load Data

## Feature table

```{r}
# Load feature table from QIIME2 artifact
ft_l7 <- read_qza(feature_table_path)$data

# Convert to data.frame
ft_l7 <- ft_l7 %>% 
  as.data.frame()
```

**Model formula:** `Abundance ~ leachate + timepoint + (1|cross)`

This tests: - Does leachate affect bacterial abundance (averaged across
all timepoints)? - Does timepoint affect bacterial abundance (averaged
across all leachate levels)?

::: callout-note
I modified the metadata file such that: - `leachate_mgL` is the
numerical value (previously leachate) of microplastic mass in milligrams
per liter of seawater - `hpf` is the numerical value (previously
timepoint) - `parents` is the categorical string (previously cross)
indicating pooled mix of colony crosses
:::

# Run MaAslin3

# Model 1: Categorical (interaction)

With Interaction term, and categorical factors

To test whether the effect of leachate depends on timepoint (or vice
versa), add an interaction term:

**Model formula:**
`Abundance/Prevelance ~ leachate * stage + (1|parents) + (1|spawn_night)`

```{r eval=FALSE}
set.seed(1)
fit_Level7_Model1 <- maaslin3(
  input_data = ft_l7,
  input_metadata = meta,
  output = "../output/maaslin-taxa/Model1",
  formula = ~ leachate * hpf + (1 | spawn_night),
  normalization = 'TSS',
  transform = 'LOG',
  correction = 'BH',
  small_random_effects = TRUE,
  augment = TRUE,
  standardize = TRUE,
  max_significance = 0.1,
  median_comparison_abundance = TRUE,
  median_comparison_prevalence = TRUE,
  plot_summary_plot = TRUE,
  summary_plot_balanced = TRUE,
  plot_associations = TRUE,
  save_models = TRUE,
  save_plots_rds = TRUE,
  max_pngs = 30,
  verbosity = 'ERROR'
)
```

## Explore warnings

### Rank deficiency

```{r}
# Example assuming your data frame is named 'dat'
mm <- model.matrix(~ leachate * stage, data = meta)
head(mm)
```

```{r}
cor(mm)
```

```{r}
qr(mm)$rank  # check matrix rank
ncol(mm)     # compare against number of columns
```

> Your correlation matrix from cor(mm) shows how linearly related the
> fixed-effect columns are in the design matrix created by
> model.matrix(\~ leachate \* stage, data). Here’s how to interpret what
> you’re seeing: Key observations - Intercept column (all NA
> correlations) The (Intercept) column gives NA correlations and the
> warning “standard deviation is zero” because it’s a constant value
> (all 1s). A constant has zero variance, so correlations with it are
> undefined. This part is normal and not a problem.​ - Diagonal of 1s
> Each variable is perfectly correlated with itself, so each diagonal
> cell shows 1.0. That’s expected. - Off-diagonal values Most
> correlations between columns are small (e.g., -0.05, 0.06), which
> means your predictors are not strongly collinear. - The largest
> correlations are between orthogonal polynomial contrasts (like
> leachate.L, leachate.Q, leachate.C), but those are meant to be
> orthogonalized in R’s polynomial or sum coding, so small correlations
> near 0 are fine. - The extremely tiny entries (e.g., 1.49e-21) are
> effectively zero, due to floating-point rounding. - No near-1 or -1
> correlations between predictors That indicates there’s no
> multicollinearity issue — none of your predictors or interaction
> columns are redundant. - Rank check Since qr(mm)\$rank equals
> ncol(mm), your matrix is full rank, meaning no fixed-effect columns
> are linearly dependent (no rank deficiency). That confirms your model
> is well-specified at the fixed-effects level. - Quick summary NA with
> intercept → expected (constant column). - Warning: sd = 0 → expected
> due to the constant intercept. - All other correlations small (\<
> \|0.1\|) → no collinearity problem. - Rank = ncol → model matrix is
> full rank, no redundancy. - Your fixed-effect part (leachate \* stage)
> is statistically valid and not the cause of any rank-deficiency
> warnings in this case

### Singularity

> **Why Random Effects Can Cause Singularity or Rank Deficiency**
>
> -   If a random effect (like **`(1 | group)`**) is included for a
>     grouping variable that has **too few levels**, **only one
>     observation per level**, or **no meaningful variance among
>     levels**, the model cannot estimate a variance for this effect; it
>     collapses to zero, causing singularity.
>
> -   Including **redundant** or **unidentifiable** random effects
>     (e.g., nesting or crossing factors unnecessarily, or random slopes
>     with no replication) can also lead to singular fits—where the
>     model's estimated random-effects covariance matrix is not positive
>     definite, or group-level variance is estimated as zero.​
>
> **What to Check**
>
> 1.  **Random Effect Structure and Data Support**
>
>     -   For each random effect, do you have multiple observations per
>         level? (You need replication within levels to estimate
>         variance.)
>
>     -   Are any random effects perfectly nested or redundant with
>         others?
>
>     -   Are there any groups with only one or two levels, or with low
>         sample size?
>
> 2.  **Variance Estimates and Model Output**
>
>     -   Inspect the random effects using **`summary(model)`** and
>         **`VarCorr(model)`**.
>
>     -   If any variance component is estimated as **zero** (or close
>         to it), or if **`isSingular(model)`** yields **`TRUE`**, that
>         random effect is not supported by the data.
>
> 3.  **Visualization**
>
>     -   Plot the number of observations per random effect level (e.g.,
>         **`table(dat$parents)`**) to check for under-represented
>         groups.
>
>     -   Use the **`dotplot(ranef(model))`** to visualize the estimated
>         random effects.
>
> 4.  **Simplification**
>
>     -   Remove or simplify random effects that are unsupported (e.g.,
>         drop random slopes or nested terms without sufficient levels).
>
>     -   Try stepwise removal: fit the model with fewer random terms
>         and see if singularity resolves.

```{r}

```

### .L, .Q, .C ?

> .L, .Q, .C are polynomial contrast columns for linear, quadratic,
> cubic trends in ordered factors.Your factors are encoded as ordered,
> so R uses polynomial contrasts to represent them.
>
> **Understanding Interaction Terms with Ordered Factors**
>
> When you use **ordered factors** in R (like your **`leachate`** and
> **`stage`**), R uses **polynomial contrasts** by default. This results
> in model terms labeled **`.L`** (linear), **`.Q`** (quadratic),
> **`.C`** (cubic), and so on, depending on the number of levels. These
> contrasts represent different shapes of trend across the ordered
> levels, rather than treating each category separately.
>
> **What Does an Interaction Mean Here?**
>
> -   Normally, an interaction like **`leachate:stage`** would tell you
>     how the effect of one factor changes depending on the level of the
>     other.
>
> -   **With polynomial contrasts for both factors**, their interaction
>     expands into multiple terms:
>
>     -   **`leachate.L:stage.L`**: linear-by-linear
>
>     -   **`leachate.L:stage.Q`**: linear effect of leachate changes in
>         a quadratic trend across stage
>
>     -   **`leachate.Q:stage.L`**: quadratic effect of leachate changes
>         in a linear trend across stage
>
>     -   **`leachate.Q:stage.C`**: quadratic effect of leachate changes
>         in a cubic trend across stage
>
> -   Each combination of a contrast for leachate and a contrast for
>     stage is a separate interaction term.
>
> **Interpreting the Terms**
>
> -   **`.L` (Linear):** Does the effect change in a straight-line
>     (monotonic) fashion across ordered levels?
>
> -   **`.Q` (Quadratic):** Is there a “U” or “n” shaped curve (i.e.,
>     the effect is more/less extreme at intermediate or end levels)?
>
> -   **`.C` (Cubic):** More complex curves with up to two inflection
>     points.
>
> So, **`leachate.L:stage.Q`** asks: "Does the **linear trend** in
> leachate change as a **quadratic function** of stage?" In practice, it
> tests for more complex, curved interaction patterns—not just simple
> increases/decreases.
>
> **Why So Many Terms?**
>
> The number of interaction terms grows with the number of polynomial
> contrasts:
>
> For example, if both factors have 4 levels, you'll get linear,
> quadratic, and cubic contrasts for each, leading to all pairwise
> combinations in the interaction.
>
> **Why Use Polynomial Contrasts?**
>
> -   **Efficiency:** If levels are meaningfully ordered (e.g., dose,
>     timepoint), polynomial contrasts let you directly test for trends
>     and simple/nonlinear patterns.
>
> -   **Interpretability:** Instead of many dummy coefficients, you can
>     test for specific trend types (overall increasing, U-shape, etc).

## Explore significant results

[MaAsLin3 Wiki](https://github.com/biobakery/biobakery/wiki/maaslin3) \>
Any significant abundance associations with a categorical variable
should usually have at least 10 observations in each category.
Significant prevalence associations with categorical variables should
also have at least 10 samples in which the feature was present and at
least 10 samples in which it was absent for each significant category.
Significant abundance associations with continuous metadata should be
checked visually for influential outliers.

> There are also a few rules of thumb to keep in mind:
>
> -    Models should ideally have about **10 times as many samples**
>     (all samples for logistic fits, non-zero samples for linear fits)
>     **as covariate terms** (**all continuous variables plus all
>     categorical variable levels**).
>
>     -   WE have \~60 samples... so max number of terms we *should* use
>         = 6 ...
>
>         -   Here hpf is continuous time... The bacteria aren't going
>             through vast changes with distinct developmental stages...
>             they're just doing normal bacteria life. Biologically, it
>             makes sense to keep our time variable as a continuous
>             numeric term.
>
>         -   
>
> Coefficients (effect sizes) larger than about 15 in absolute value are
> usually suspect unless very small unstandardized predictors are being
> included. (A coefficient of 15 corresponds to a fold change \>30000!).
> If you encounter such coefficients, check that (1) no error was
> thrown, (2) the diagnostics look reasonable, (3) a sufficient number
> of samples were used in fitting, (4) the q-value is significant, (5)
> the metadata are not highly collinear, and (6) the random effects are
> plausible.

```{r}
sig_l7_int <- read_tsv("../output/maaslin-taxa/Level7_filtered_interaction/significant_results.tsv")
```

```{r}
sig_l7_m3cat <- read_tsv("../output/maaslin-taxa/M3cat/significant_results.tsv")
```

# Model 2: Categorical (additive)

This is an **additive model** that can be written as:

$$\text{Abundance|Prevalence} \sim \text{leachate} + \text{stage} + (1|\text{spawn_night})$$

Where:

-    leachate is a categorical factor with ordered levels (control, low,
    mid, high)

-   stage is a categorical factor with ordered levels (cleavage,
    prawnchip, earlygastrula)

This model tests:

1.  **Main effect of leachate**: Does leachate concentration affect
    bacterial abundance, averaging across all timepoints?
2.  **Main effect of stage**: Does developmental stage (i.e. hours post
    fertilization) affect bacterial abundance, averaging across all
    leachate treatments?
3.  **Random effect of spawn night**: Accounts for correlation among
    samples collected from the same spawn night

What This Model Does NOT Test:

The current model does **NOT** test for interaction effects between
leachate and stage. An interaction would answer the question: "Does the
effect of leachate depend on the stage (or vice versa)?"

```{r}
set.seed(1)
fit_Level7_Model2 <- maaslin3(
  input_data = ft_l7,
  input_metadata = meta,
  output = "../output/maaslin-taxa/Model2",
  formula = ~ leachate + stage + (1 | spawn_night),
  normalization = 'TSS',
  transform = 'LOG',
  correction = 'BH',
  augment = TRUE,
  standardize = TRUE,
  max_significance = 0.1,
  median_comparison_abundance = TRUE,
  median_comparison_prevalence = FALSE,
  max_pngs = 5,
  cores = 1,
  verbosity = 'WARN'
)
```

# Model 3: Continuous (interaction)

To compare specific leachate concentrations and timepoints, treat them
as categorical factors:

```{r, eval=FALSE}
set.seed(1)
fit_Level7_Model3 <- maaslin3(
  input_data = ft_l7,
  input_metadata = meta,
  output = "../output/maaslin-taxa/Model3",
  formula = ~ leachate_mgL * hpf + (1 | spawn_night),
  normalization = 'TSS',
  transform = 'LOG',
  correction = 'BH',
  augment = TRUE,
  standardize = TRUE,
  max_significance = 0.1,
  median_comparison_abundance = TRUE,
  median_comparison_prevalence = FALSE,
  max_pngs = 5,
  cores = 1,
  verbosity = 'WARN'
)
```

This will provide comparisons like: - Leachate 0.01 vs 0, Leachate 0.1
vs 0, Leachate 1 vs 0 - Timepoint 9 vs 4, Timepoint 14 vs 4

# Model 4: Continuous (additive)

This model tests for main effects of leachate and stage separately,
without testing for interaction between them, and controlling for
parental cross.

```{r}
set.seed(1)
fit_Level7_Model4 <- maaslin3(
  input_data = ft_l7,
  input_metadata = meta,
  output = "../output/maaslin-taxa/Model4",
  formula = ~ leachate_mgL + hpf + (1 | spawn_night),
  normalization = 'TSS',
  transform = 'LOG',
  correction = 'BH',
  augment = TRUE,
  standardize = TRUE,
  max_significance = 0.1,
  median_comparison_abundance = TRUE,
  median_comparison_prevalence = FALSE,
  max_pngs = 5,
  cores = 1,
  verbosity = 'WARN'
)
```

# Model 5: Level contrasts

```{r}
set.seed(1)
fit_Level7_Model5 <- maaslin3(
  input_data = ft_l7,
  input_metadata = meta,
  output = "../output/maaslin-taxa/Model5",
  formula = '~ ordered(leachate) + hpf + (1 | spawn_night)',
  normalization = 'TSS',
  transform = 'LOG',
  correction = 'BH',
  augment = TRUE,
  standardize = TRUE,
  max_significance = 0.1,
  median_comparison_abundance = TRUE,
  median_comparison_prevalence = TRUE,
  plot_summary_plot = TRUE,
  plot_associations = TRUE,
  max_pngs = 30,
  cores = 1,
  verbosity = 'ERROR'
)
```

::: callout-note
Leachate not significant
:::

# Model 6: Group-wise differences

```{r}

```

# Model 7:

-   `small_random_effects` (default `FALSE`): Automatically replace
    random effects with fixed effects in the logistic prevalence model
    to handle low numbers of observations per group.

```{r}
set.seed(1)
fit_Level7_Model7 <- maaslin3(
  input_data = ft_l7,
  input_metadata = meta,
  output = "../output/maaslin-taxa/Model7",
  formula = '~ leachate + hpf + (1 | spawn_night)',
  normalization = 'TSS',
  transform = 'LOG',
  correction = 'BH',
  small_random_effects = TRUE, 
  augment = TRUE,
  standardize = TRUE,
  max_significance = 0.1,
  median_comparison_abundance = TRUE,
  median_comparison_prevalence = TRUE,
  plot_summary_plot = TRUE,
  plot_associations = TRUE,
  max_pngs = 30,
  cores = 1,
  verbosity = 'ERROR'
)
```

# Model Comparison Guide

| Model | Tests | Advantages | Limitations |
|----------------|----------------|--------------------|---------------------|
| **Additive** | Main effects only | Simple interpretation, detects overall trends | Cannot detect condition-specific effects, averages across other variable |
| **Interaction** | Main + interaction effects | Identifies whether effects depend on other variables | More complex interpretation, requires more samples |
| **Categorical** | Pairwise comparisons | Shows which specific levels differ | Many comparisons (multiple testing), doesn't test for linear trends |

# Results Interpretation

See [maaslin2_interpretation.qmd](maaslin2_interpretation.qmd) for
detailed guidance on: - Understanding coefficient values - What
"averaging across" means - Why we lose granularity about specific
conditions - How to extract specific condition comparisons
