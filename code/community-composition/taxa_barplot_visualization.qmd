---
title: "Taxa Barplot Visualization from QIIME2"
author: "Sarah Tanja"
date: today
date-modified: today
format:
  gfm: default 
  html:
    theme: journal
    highlight-style: github
    page-layout: full
    code-background: true
    code-tools: 
      source: true
      toggle: true
    toc: true
    toc-depth: 2
    toc-location: left
    df-print: kable
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    reference-location: margin
    citation-location: margin
---

# Background

This document creates a publication-ready taxa barplot visualization from QIIME2 visualization files (.qzv). The script extracts taxonomic composition data from the QIIME2 artifacts and visualizes it using ggplot2.

## Inputs

- QIIME2 visualization file: `salipante/Sarah_StonyCoral/250414_StonyCoral_270x200_filtered_taxa-bar-plots.qzv`
- Metadata file: `metadata/metadata.tsv`

## Outputs

- Publication-ready taxa barplot figure
- Summary statistics of taxonomic composition

# Setup

## Define file paths

```{r}
# Input paths
qzv_file <- "../../salipante/Sarah_StonyCoral/250414_StonyCoral_270x200_filtered_taxa-bar-plots.qzv"
metadata_path <- "../../metadata/meta.csv"

# Output directory
output_dir <- "../../output/figures"

# Create output directory if it doesn't exist
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
```

## Load libraries

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(scales)
library(viridis)
library(RColorBrewer)
```

# Import Data

## Extract data from .qzv file

QIIME2 visualization files (.qzv) are zip archives containing CSV files with taxonomic data at different levels.

```{r}
# Define temp paths for extraction
temp_dir <- tempdir()
extract_dir <- file.path(temp_dir, "qzv_extract")

# Extract the .qzv file
unzip(qzv_file, exdir = extract_dir)

# Find the UUID directory (QIIME2 uses UUIDs for internal structure)
uuid_dir <- list.dirs(extract_dir, recursive = FALSE, full.names = TRUE)[1]
data_dir <- file.path(uuid_dir, "data")

# List available taxonomic levels
available_files <- list.files(data_dir, pattern = "\\.csv$")
cat("Available taxonomic levels:\n")
print(available_files)
```

## Load taxonomic data at different levels

```{r}
# Load all taxonomic levels (1-7)
# Level 1: Kingdom/Domain
# Level 2: Phylum
# Level 3: Class
# Level 4: Order
# Level 5: Family
# Level 6: Genus
# Level 7: Species

level1_file <- file.path(data_dir, "level-1.csv")
taxa_l1 <- read_csv(level1_file, show_col_types = FALSE)

level2_file <- file.path(data_dir, "level-2.csv")
taxa_l2 <- read_csv(level2_file, show_col_types = FALSE)

level3_file <- file.path(data_dir, "level-3.csv")
taxa_l3 <- read_csv(level3_file, show_col_types = FALSE)

level4_file <- file.path(data_dir, "level-4.csv")
taxa_l4 <- read_csv(level4_file, show_col_types = FALSE)

level5_file <- file.path(data_dir, "level-5.csv")
taxa_l5 <- read_csv(level5_file, show_col_types = FALSE)

level6_file <- file.path(data_dir, "level-6.csv")
taxa_l6 <- read_csv(level6_file, show_col_types = FALSE)

level7_file <- file.path(data_dir, "level-7.csv")
taxa_l7 <- read_csv(level7_file, show_col_types = FALSE)

cat("Level 1 (Kingdom) dimensions:", dim(taxa_l1), "\n")
cat("Level 2 (Phylum) dimensions:", dim(taxa_l2), "\n")
cat("Level 3 (Class) dimensions:", dim(taxa_l3), "\n")
cat("Level 4 (Order) dimensions:", dim(taxa_l4), "\n")
cat("Level 5 (Family) dimensions:", dim(taxa_l5), "\n")
cat("Level 6 (Genus) dimensions:", dim(taxa_l6), "\n")
cat("Level 7 (Species) dimensions:", dim(taxa_l7), "\n")
```

## Load metadata

```{r}
meta <- read_csv(metadata_path) 
# set factors
metadata <- meta %>% 
  mutate(
    collection_date = as.Date(collection_date, format = "%d-%b-%Y"),
    stage    = factor(stage,    levels = c("cleavage", "prawnchip", "earlygastrula"), ordered = TRUE),
    leachate = factor(leachate, levels = c("control", "low", "mid", "high"),        ordered = TRUE),
    spawn_night = factor(
      collection_date,
      levels  = as.Date(c("06-Jul-2024", "07-Jul-2024", "08-Jul-2024"), format = "%d-%b-%Y"),
      labels  = c("July 6th", "July 7th", "July 8th"),
      ordered = TRUE
    )
  )
# Display metadata structure
head(metadata)
```

# Data Processing

## Transform data for visualization

We'll use Level 6 (genus level) as it provides a good balance between detail and interpretability.
```{r}
# Transform data to long format
taxa_long <- taxa_l6 %>%
  pivot_longer(
    cols = -c(index, `development-stage`, cross, timepoint, leachate), 
    names_to = "taxon",
    values_to = "count"
  ) %>% 
  rename(sample_id = index)

# Calculate relative abundance
taxa_long <- taxa_long %>%
  group_by(sample_id) %>%
  mutate(
    total_count = sum(count),
    rel_abundance = count / total_count * 100
  ) %>%
  ungroup()

# Extract taxonomic rank information
taxa_long <- taxa_long %>%
  mutate(
    # Extract genus (last named rank before __)
    genus = str_extract(taxon, "g__([^;_]+)", group = 1),
    # Extract family
    family = str_extract(taxon, "f__([^;_]+)", group = 1),
    # Extract phylum
    phylum = str_extract(taxon, "p__([^;_]+)", group = 1),
    # Create a simplified label
    genus = if_else(is.na(genus) | genus == "", 
                    paste0("Unknown_", family), 
                    genus)
  )

# Join with metadata
taxa_long <- taxa_long %>%
  left_join(metadata, by = "sample_id")

head(taxa_long)
```

## Select top taxa for visualization

```{r}
# Calculate mean relative abundance per genus
top_genera <- taxa_long %>%
  group_by(genus) %>%
  summarize(mean_abundance = mean(rel_abundance)) %>%
  arrange(desc(mean_abundance)) %>%
  slice_head(n = 15) %>%
  pull(genus)

# Create a factor for plotting (top genera + "Other")
taxa_plot <- taxa_long %>%
  mutate(
    genus_grouped = if_else(genus %in% top_genera, genus, "Other")
  ) %>%
  group_by(sample_id, genus_grouped, stage, 
           hpf, leachate.y) %>%
  summarize(rel_abundance = sum(rel_abundance), .groups = "drop")

# Order samples by metadata
taxa_plot <- taxa_plot %>%
  mutate(
    sample_id = factor(sample_id),
    genus_grouped = factor(genus_grouped, 
                          levels = c(top_genera, "Other"))
  )
```

# Data Processing Functions

```{r}
# Function to process taxonomic data at any level
process_taxa_level <- function(taxa_data, metadata, rank_name, top_n = 15) {
  # Transform data to long format
  taxa_long <- taxa_data %>%
    pivot_longer(
      cols = -c(index, `development-stage`, cross, timepoint, leachate), 
      names_to = "taxon",
      values_to = "count"
    ) %>% 
    rename(sample_id = index)
  
  # Calculate relative abundance
  taxa_long <- taxa_long %>%
    group_by(sample_id) %>%
    mutate(
      total_count = sum(count),
      rel_abundance = count / total_count * 100
    ) %>%
    ungroup()
  
  # Extract taxonomic information based on rank
  if (rank_name == "Kingdom") {
    pattern <- "k__([^;_]+)"
  } else if (rank_name == "Phylum") {
    pattern <- "p__([^;_]+)"
  } else if (rank_name == "Class") {
    pattern <- "c__([^;_]+)"
  } else if (rank_name == "Order") {
    pattern <- "o__([^;_]+)"
  } else if (rank_name == "Family") {
    pattern <- "f__([^;_]+)"
  } else if (rank_name == "Genus") {
    pattern <- "g__([^;_]+)"
  } else if (rank_name == "Species") {
    pattern <- "s__([^;_]+)"
  }
  
  taxa_long <- taxa_long %>%
    mutate(
      taxon_name = str_extract(taxon, pattern, group = 1),
      taxon_name = if_else(is.na(taxon_name) | taxon_name == "", 
                          paste0("Unknown_", rank_name), 
                          taxon_name)
    )
  
  # Join with metadata
  taxa_long <- taxa_long %>%
    left_join(metadata, by = "sample_id")
  
  # Calculate top taxa
  top_taxa <- taxa_long %>%
    group_by(taxon_name) %>%
    summarize(mean_abundance = mean(rel_abundance)) %>%
    arrange(desc(mean_abundance)) %>%
    slice_head(n = top_n) %>%
    pull(taxon_name)
  
  # Create grouped data for plotting
  taxa_plot <- taxa_long %>%
    mutate(
      taxon_grouped = if_else(taxon_name %in% top_taxa, taxon_name, "Other")
    ) %>%
    group_by(sample_id, taxon_grouped, stage, hpf, leachate.y) %>%
    summarize(rel_abundance = sum(rel_abundance), .groups = "drop") %>%
    mutate(
      sample_id = factor(sample_id),
      taxon_grouped = factor(taxon_grouped, levels = c(top_taxa, "Other"))
    )
  
  return(list(taxa_long = taxa_long, taxa_plot = taxa_plot, top_taxa = top_taxa))
}
```

# Visualization
```{r}
# install if needed:
# install.packages(c("ggplot2", "ggthemes", "pals", "Polychrome", "viridisLite"))
library(ggplot2)
library(ggthemes)
library(pals)
library(Polychrome)
library(viridisLite)
library(dplyr)
library(tidyr)
library(stringr)

# helper to turn a vector of colors into a swatch data frame
as_swatch <- function(cols, name) {
  tibble(palette = name,
         idx = seq_along(cols),
         hex = cols)
}

# build the four palettes (16 colors each)
pal_glasbey  <- pals::glasbey(16)
pal_tableau  <- ggthemes::tableau_color_pal("Tableau 20")(20)[1:16]
pal_poly36   <- Polychrome::palette36.colors(16)
pal_mako16   <- viridisLite::viridis(16, option = "mako")

swatches <- bind_rows(
  as_swatch(pal_glasbey, "Glasbey (16)"),
  as_swatch(pal_tableau, "Tableau 20 (first 16)"),
  as_swatch(pal_poly36, "Polychrome 36 (first 16)"),
  as_swatch(pal_mako16, "Viridis 'mako' (16)")
) %>%
  mutate(idx = factor(idx, levels = 1:16))

# plot swatches
ggplot(swatches, aes(x = idx, y = 1, fill = hex)) +
  geom_tile(color = "grey20") +
  geom_text(aes(label = hex),
            size = 3, vjust = 1.7, color = "white", fontface = "bold",
            data = ~ .x %>% filter(palette != "Viridis 'mako' (16)")) +
  scale_fill_identity() +
  facet_wrap(~ palette, ncol = 1, strip.position = "top") +
  scale_x_discrete(drop = FALSE) +
  labs(x = NULL, y = NULL,
       title = "Quick swatch view (16 colors each)") +
  theme_minimal(base_size = 12) +
  theme(panel.grid = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        strip.text = element_text(face = "bold"))

```

# Main Figures - Taxa Barplots for All Taxonomic Levels

## Level 1 - Kingdom/Domain

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 1 data
level1_processed <- process_taxa_level(taxa_l1, metadata, "Kingdom", top_n = 10)

# Create color palette
n_colors_l1 <- length(level1_processed$top_taxa) + 1
colors_l1 <- pal_tableau[1:n_colors_l1]

# Create the barplot
p_level1 <- ggplot(level1_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l1, name = "Kingdom") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 1 (Kingdom/Domain)",
    subtitle = "Taxonomic composition across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level1)
```

## Level 2 - Phylum

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 2 data
level2_processed <- process_taxa_level(taxa_l2, metadata, "Phylum", top_n = 15)

# Create color palette
n_colors_l2 <- length(level2_processed$top_taxa) + 1
colors_l2 <- pal_tableau[1:n_colors_l2]

# Create the barplot
p_level2 <- ggplot(level2_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l2, name = "Phylum") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 2 (Phylum)",
    subtitle = "Top phyla across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level2)
```

## Level 3 - Class

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 3 data
level3_processed <- process_taxa_level(taxa_l3, metadata, "Class", top_n = 15)

# Create color palette
n_colors_l3 <- length(level3_processed$top_taxa) + 1
colors_l3 <- pal_tableau[1:n_colors_l3]

# Create the barplot
p_level3 <- ggplot(level3_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l3, name = "Class") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 3 (Class)",
    subtitle = "Top classes across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level3)
```

## Level 4 - Order

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 4 data
level4_processed <- process_taxa_level(taxa_l4, metadata, "Order", top_n = 15)

# Create color palette
n_colors_l4 <- length(level4_processed$top_taxa) + 1
colors_l4 <- pal_tableau[1:n_colors_l4]

# Create the barplot
p_level4 <- ggplot(level4_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l4, name = "Order") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 4 (Order)",
    subtitle = "Top orders across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level4)
```

## Level 5 - Family

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 5 data
level5_processed <- process_taxa_level(taxa_l5, metadata, "Family", top_n = 15)

# Create color palette
n_colors_l5 <- length(level5_processed$top_taxa) + 1
colors_l5 <- pal_tableau[1:n_colors_l5]

# Create the barplot
p_level5 <- ggplot(level5_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l5, name = "Family") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 5 (Family)",
    subtitle = "Top families across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level5)
```

## Level 6 - Genus (Original Main Figure)

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 6 data
level6_processed <- process_taxa_level(taxa_l6, metadata, "Genus", top_n = 15)

# Create color palette
n_colors_l6 <- length(level6_processed$top_taxa) + 1
colors_l6 <- pal_tableau[1:n_colors_l6]

# Create the barplot
p_level6 <- ggplot(level6_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l6, name = "Genus") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 6 (Genus)",
    subtitle = "Top 15 genera across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level6)

# Keep old variable names for compatibility with later code
p1 <- p_level6
taxa_plot <- level6_processed$taxa_plot
top_genera <- level6_processed$top_taxa
taxa_long <- level6_processed$taxa_long
```

## Level 7 - Species

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Process Level 7 data
level7_processed <- process_taxa_level(taxa_l7, metadata, "Species", top_n = 15)

# Create color palette
n_colors_l7 <- length(level7_processed$top_taxa) + 1
colors_l7 <- pal_tableau[1:n_colors_l7]

# Create the barplot
p_level7 <- ggplot(level7_processed$taxa_plot, 
             aes(x = sample_id, y = rel_abundance, fill = taxon_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_manual(values = colors_l7, name = "Species") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition - Level 7 (Species)",
    subtitle = "Top 15 species across developmental stages and leachate treatments",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    legend.key.size = unit(0.5, "cm"),
    legend.text = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

print(p_level7)
```

## Taxa barplot - Faceted by Treatment

```{r}
#| fig-width: 14
#| fig-height: 10
#| fig-dpi: 300

# Aggregate by treatment groups
taxa_treatment <- taxa_long %>%
  mutate(
    genus_grouped = if_else(genus %in% top_genera, genus, "Other"),
    leachate_label = paste0("Leachate: ", leachate.y),
    timepoint_label = paste0(timepoint, " hpf")
  ) %>%
  group_by(leachate_label, timepoint_label, genus_grouped) %>%
  summarize(mean_rel_abundance = mean(rel_abundance), .groups = "drop") %>%
  mutate(
    genus_grouped = factor(genus_grouped, levels = c(top_genera, "Other"))
  )

# Create faceted barplot
p2 <- ggplot(taxa_treatment, 
             aes(x = timepoint_label, y = mean_rel_abundance, fill = genus_grouped)) +
  geom_bar(stat = "identity", width = 0.8) +
  scale_fill_manual(values = colors, name = "Genus") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  facet_wrap(~ leachate_label, ncol = 4) +
  labs(
    title = "Bacterial Community Composition by Leachate Treatment and Timepoint",
    x = "Timepoint (hours post fertilization)",
    y = "Mean Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    legend.position = "bottom",
    legend.key.size = unit(0.4, "cm"),
    strip.background = element_rect(fill = "lightgray", color = "black"),
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", size = 14)
  ) +
  guides(fill = guide_legend(nrow = 2))

print(p2)
```

## Taxa barplot - Phylum Level

```{r}
#| fig-width: 12
#| fig-height: 8
#| fig-dpi: 300

# Calculate top phyla
top_phyla <- taxa_long %>%
  group_by(phylum) %>%
  summarize(mean_abundance = mean(rel_abundance)) %>%
  arrange(desc(mean_abundance)) %>%
  slice_head(n = 10) %>%
  pull(phylum)

# Aggregate by phylum
taxa_phylum <- taxa_long %>%
  mutate(
    phylum_grouped = if_else(phylum %in% top_phyla, phylum, "Other")
  ) %>%
  group_by(sample_id, phylum_grouped, stage, 
           timepoint, leachate.x) %>%
  summarize(rel_abundance = sum(rel_abundance), .groups = "drop") %>%
  mutate(
    phylum_grouped = factor(phylum_grouped, levels = c(top_phyla, "Other"))
  )

# Create phylum-level barplot
p3 <- ggplot(taxa_phylum, 
             aes(x = sample_id, y = rel_abundance, fill = phylum_grouped)) +
  geom_bar(stat = "identity", width = 0.9) +
  scale_fill_brewer(palette = "Paired", name = "Phylum") +
  scale_y_continuous(labels = percent_format(scale = 1)) +
  labs(
    title = "Bacterial Community Composition at Phylum Level",
    x = "Sample",
    y = "Relative Abundance (%)"
  ) +
  theme_classic(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
    legend.position = "right",
    plot.title = element_text(face = "bold", size = 14)
  )

print(p3)
```

# Summary Statistics

## Top taxa across all samples

```{r}
# Calculate overall abundance statistics
top_taxa_summary <- taxa_long %>%
  group_by(genus) %>%
  summarize(
    mean_abundance = mean(rel_abundance),
    sd_abundance = sd(rel_abundance),
    max_abundance = max(rel_abundance),
    n_samples_present = sum(rel_abundance > 0)
  ) %>%
  arrange(desc(mean_abundance)) %>%
  slice_head(n = 20)

print(top_taxa_summary)
```


# Save Figures

```{r}
# Save main figures for all taxonomic levels
ggsave(file.path(output_dir, "taxa_barplot_level1_kingdom.png"), 
       plot = p_level1, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_level2_phylum.png"), 
       plot = p_level2, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_level3_class.png"), 
       plot = p_level3, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_level4_order.png"), 
       plot = p_level4, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_level5_family.png"), 
       plot = p_level5, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_level6_genus.png"), 
       plot = p_level6, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_level7_species.png"), 
       plot = p_level7, width = 12, height = 8, dpi = 300)

# Save additional figures (treatment and phylum views)
ggsave(file.path(output_dir, "taxa_barplot_all_samples.png"), 
       plot = p1, width = 12, height = 8, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_by_treatment.png"), 
       plot = p2, width = 14, height = 10, dpi = 300)

ggsave(file.path(output_dir, "taxa_barplot_phylum.png"), 
       plot = p3, width = 12, height = 8, dpi = 300)


cat("Figures saved to output/figures/\n")
cat("Main figures for levels 1-7:\n")
cat("  - taxa_barplot_level1_kingdom.png\n")
cat("  - taxa_barplot_level2_phylum.png\n")
cat("  - taxa_barplot_level3_class.png\n")
cat("  - taxa_barplot_level4_order.png\n")
cat("  - taxa_barplot_level5_family.png\n")
cat("  - taxa_barplot_level6_genus.png\n")
cat("  - taxa_barplot_level7_species.png\n")
```

# Session Info

```{r}
sessionInfo()
```
